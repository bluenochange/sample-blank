<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"
       default-autowire="byName">
	
	<bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="false" />
		<!-- 参数化SQL(多个语句相同,参数不同)合并 -->
		<property name="mergeSql" value="true" />
	</bean>
	
	<!-- WallFilter基于SQL语义分析来实现防御SQL注入攻击. 把logViolation设置为true，而throwException设置为false。就可以观察是否存在违规的情况，同时不影响业务运行。 -->
	<bean id="wallFilter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<!-- 对被认为是攻击的SQL进行LOG.error输出 -->
		<property name="logViolation" value="true" />
		<!-- 对被认为是攻击的SQL抛出SQLExcepton -->
		<property name="throwException" value="false" />
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 清除无用连接的等待时间1800秒，也就是30分钟.关闭长时间不使用的连接 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 连接属性 -->
		<property name="connectionProperties" value="clientEncoding=UTF-8" />
		<!-- 用于统计监控信息 ,StatFilter的几种配置方式: 1、proxyFilters属性自定义 2、StatFilter简化配置方式，通过filters属性value="mergeStat" 
			3、可以通过connectProperties属性来打开mergeSql功能druid.stat.mergeSql=true 4、通过JVM参数:-Ddruid.stat.mergeSql=true -->
		<property name="proxyFilters">
			<list>
				<ref bean="wallFilter" />
				<ref bean="statFilter" />
			</list>
		</property>
	</bean>
	
	<!-- SpringJdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
    <!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    
	<!--切面事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="unique*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="persist*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="remove*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="create*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="execute*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="auto*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="batch*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="check*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="calculate*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="handle*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
			<tx:method name="*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.cetiti.base.exception.ServiceException" no-rollback-for="com.cetiti.base.exception.BasicException"/>
		</tx:attributes> 
	</tx:advice>
	
	<!--为指定包下的类的方法应用事务切点-->
	<aop:config>
		<aop:pointcut expression="execution(* com.cetiti..*.service.impl.*.*(..))" id="serviceTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTxMethodPointCut"/>
	</aop:config>

	<!-- 如果使用注解，把这个注释去掉，同时将`tx:advice`和`aop:config`注释掉 -->
	<!-- 默认的事务管理器名字是 transactionManager，如果不一样，请设置 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>